CCS PCM C Compiler, Version 5.007, 61971               25-Oca-21 23:12

               Filename:   C:\Users\USER\Desktop\finalsýnav\main.lst

               ROM used:   845 words (10%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           23 (6%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   31B
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  RETLW  0C
000D:  RETLW  69
000E:  RETLW  FE
000F:  RETLW  6C
0010:  RETLW  65
0011:  RETLW  6D
0012:  RETLW  20
0013:  RETLW  79
0014:  RETLW  61
0015:  RETLW  70
0016:  RETLW  00
0017:  DATA 0A,00
*
0166:  BSF    03.5
0167:  BSF    03.6
0168:  BSF    0C.7
0169:  BSF    0C.0
016A:  NOP
016B:  NOP
016C:  BCF    03.5
016D:  MOVF   0C,F
016E:  BTFSC  03.2
016F:  GOTO   189
0170:  MOVF   0D,W
0171:  BCF    03.6
0172:  MOVWF  23
0173:  BSF    03.6
0174:  MOVF   0F,W
0175:  BCF    03.6
0176:  MOVWF  24
0177:  BSF    03.6
0178:  MOVF   0C,W
0179:  BCF    03.6
017A:  MOVWF  27
017B:  CALL   13A
017C:  MOVF   23,W
017D:  BSF    03.6
017E:  MOVWF  0D
017F:  BCF    03.6
0180:  MOVF   24,W
0181:  BSF    03.6
0182:  MOVWF  0F
0183:  INCF   0D,F
0184:  BTFSC  03.2
0185:  INCF   0F,F
0186:  BCF    03.6
0187:  GOTO   166
0188:  BSF    03.6
0189:  BCF    03.6
018A:  BCF    0A.3
018B:  BCF    0A.4
018C:  GOTO   338 (RETURN)
*
0282:  MOVF   0B,W
0283:  MOVWF  23
0284:  BCF    0B.7
0285:  BSF    03.5
0286:  BSF    03.6
0287:  BSF    0C.7
0288:  BSF    0C.0
0289:  NOP
028A:  NOP
028B:  BCF    03.5
028C:  MOVF   0C,W
028D:  ANDLW  7F
028E:  BTFSC  03.2
028F:  GOTO   2C9
0290:  BCF    03.6
0291:  MOVWF  24
0292:  BSF    03.6
0293:  MOVF   0D,W
0294:  BCF    03.6
0295:  MOVWF  25
0296:  BSF    03.6
0297:  MOVF   0F,W
0298:  BCF    03.6
0299:  MOVWF  26
029A:  MOVF   24,W
029B:  MOVWF  27
029C:  CALL   13A
029D:  MOVF   25,W
029E:  BSF    03.6
029F:  MOVWF  0D
02A0:  BCF    03.6
02A1:  MOVF   26,W
02A2:  BSF    03.6
02A3:  MOVWF  0F
02A4:  BSF    03.5
02A5:  BSF    0C.7
02A6:  BSF    0C.0
02A7:  NOP
02A8:  NOP
02A9:  BCF    03.5
02AA:  RLF    0C,W
02AB:  RLF    0E,W
02AC:  ANDLW  7F
02AD:  BTFSC  03.2
02AE:  GOTO   2C9
02AF:  BCF    03.6
02B0:  MOVWF  24
02B1:  BSF    03.6
02B2:  MOVF   0D,W
02B3:  BCF    03.6
02B4:  MOVWF  25
02B5:  BSF    03.6
02B6:  MOVF   0F,W
02B7:  BCF    03.6
02B8:  MOVWF  26
02B9:  MOVF   24,W
02BA:  MOVWF  27
02BB:  CALL   13A
02BC:  MOVF   25,W
02BD:  BSF    03.6
02BE:  MOVWF  0D
02BF:  BCF    03.6
02C0:  MOVF   26,W
02C1:  BSF    03.6
02C2:  MOVWF  0F
02C3:  INCF   0D,F
02C4:  BTFSC  03.2
02C5:  INCF   0F,F
02C6:  BCF    03.6
02C7:  GOTO   285
02C8:  BSF    03.6
02C9:  BCF    03.6
02CA:  BTFSC  23.7
02CB:  BSF    0B.7
02CC:  BCF    0A.3
02CD:  BCF    0A.4
02CE:  GOTO   342 (RETURN)
02CF:  MOVF   26,W
02D0:  CLRF   78
02D1:  SUBWF  25,W
02D2:  BTFSC  03.0
02D3:  GOTO   2D7
02D4:  MOVF   25,W
02D5:  MOVWF  77
02D6:  GOTO   2E3
02D7:  CLRF   77
02D8:  MOVLW  08
02D9:  MOVWF  27
02DA:  RLF    25,F
02DB:  RLF    77,F
02DC:  MOVF   26,W
02DD:  SUBWF  77,W
02DE:  BTFSC  03.0
02DF:  MOVWF  77
02E0:  RLF    78,F
02E1:  DECFSZ 27,F
02E2:  GOTO   2DA
02E3:  RETURN
02E4:  MOVF   78,W
02E5:  MOVF   23,W
02E6:  MOVWF  25
02E7:  MOVLW  64
02E8:  MOVWF  26
02E9:  CALL   2CF
02EA:  MOVF   77,W
02EB:  MOVWF  23
02EC:  MOVF   78,W
02ED:  MOVLW  30
02EE:  BTFSS  03.2
02EF:  GOTO   2F7
02F0:  BTFSS  24.1
02F1:  GOTO   2FE
02F2:  BTFSC  24.3
02F3:  GOTO   2FE
02F4:  BTFSC  24.4
02F5:  MOVLW  20
02F6:  GOTO   2FA
02F7:  BCF    24.3
02F8:  BCF    24.4
02F9:  BSF    24.0
02FA:  ADDWF  78,F
02FB:  MOVF   78,W
02FC:  MOVWF  27
02FD:  CALL   13A
02FE:  MOVF   23,W
02FF:  MOVWF  25
0300:  MOVLW  0A
0301:  MOVWF  26
0302:  CALL   2CF
0303:  MOVF   77,W
0304:  MOVWF  23
0305:  MOVF   78,W
0306:  MOVLW  30
0307:  BTFSS  03.2
0308:  GOTO   30F
0309:  BTFSC  24.3
030A:  GOTO   313
030B:  BTFSS  24.0
030C:  GOTO   313
030D:  BTFSC  24.4
030E:  MOVLW  20
030F:  ADDWF  78,F
0310:  MOVF   78,W
0311:  MOVWF  27
0312:  CALL   13A
0313:  MOVLW  30
0314:  ADDWF  23,F
0315:  MOVF   23,W
0316:  MOVWF  27
0317:  CALL   13A
0318:  BCF    0A.3
0319:  BCF    0A.4
031A:  GOTO   34B (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0018:  MOVLW  28
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02B
001E:  MOVLW  06
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  7B
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  DECFSZ 00,F
002A:  GOTO   01E
002B:  RETURN
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_DATA4 PIN_B3 
.................... #define LCD_DATA5 PIN_B4 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B6 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0095:  BSF    06.3
....................    output_float(LCD_DATA5); 
0096:  BSF    06.4
....................    output_float(LCD_DATA6); 
0097:  BSF    06.5
....................    output_float(LCD_DATA7); 
0098:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0099:  BCF    03.5
009A:  BSF    06.1
009B:  BSF    03.5
009C:  BCF    06.1
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(1); 
009E:  BCF    03.5
009F:  BSF    06.2
00A0:  BSF    03.5
00A1:  BCF    06.2
....................    delay_cycles(1); 
00A2:  NOP
....................    high = lcd_read_nibble(); 
00A3:  BCF    03.5
00A4:  CALL   05C
00A5:  MOVF   78,W
00A6:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
00A7:  BCF    06.2
00A8:  BSF    03.5
00A9:  BCF    06.2
....................    delay_cycles(1); 
00AA:  NOP
....................    lcd_output_enable(1); 
00AB:  BCF    03.5
00AC:  BSF    06.2
00AD:  BSF    03.5
00AE:  BCF    06.2
....................    delay_us(1); 
00AF:  GOTO   0B0
00B0:  GOTO   0B1
00B1:  NOP
....................    low = lcd_read_nibble(); 
00B2:  BCF    03.5
00B3:  CALL   05C
00B4:  MOVF   78,W
00B5:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    06.2
00B7:  BSF    03.5
00B8:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B9:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00BA:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00BB:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00BC:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BD:  BCF    03.5
00BE:  SWAPF  2F,W
00BF:  MOVWF  77
00C0:  MOVLW  F0
00C1:  ANDWF  77,F
00C2:  MOVF   77,W
00C3:  IORWF  2E,W
00C4:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005C:  CLRF   30
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
005D:  BSF    03.5
005E:  BSF    06.3
005F:  MOVLW  00
0060:  BCF    03.5
0061:  BTFSC  06.3
0062:  MOVLW  01
0063:  IORWF  30,F
....................    n |= input(LCD_DATA5) << 1; 
0064:  BSF    03.5
0065:  BSF    06.4
0066:  MOVLW  00
0067:  BCF    03.5
0068:  BTFSC  06.4
0069:  MOVLW  01
006A:  MOVWF  77
006B:  BCF    03.0
006C:  RLF    77,F
006D:  MOVF   77,W
006E:  IORWF  30,F
....................    n |= input(LCD_DATA6) << 2; 
006F:  BSF    03.5
0070:  BSF    06.5
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  06.5
0074:  MOVLW  01
0075:  MOVWF  77
0076:  RLF    77,F
0077:  RLF    77,F
0078:  MOVLW  FC
0079:  ANDWF  77,F
007A:  MOVF   77,W
007B:  IORWF  30,F
....................    n |= input(LCD_DATA7) << 3; 
007C:  BSF    03.5
007D:  BSF    06.6
007E:  MOVLW  00
007F:  BCF    03.5
0080:  BTFSC  06.6
0081:  MOVLW  01
0082:  MOVWF  77
0083:  RLF    77,F
0084:  RLF    77,F
0085:  RLF    77,F
0086:  MOVLW  F8
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  30,F
....................     
....................    return(n); 
008A:  MOVF   30,W
008B:  MOVWF  78
....................   #else 
008C:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002C:  BTFSC  2F.0
002D:  GOTO   030
002E:  BCF    06.3
002F:  GOTO   031
0030:  BSF    06.3
0031:  BSF    03.5
0032:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0033:  BCF    03.5
0034:  BTFSC  2F.1
0035:  GOTO   038
0036:  BCF    06.4
0037:  GOTO   039
0038:  BSF    06.4
0039:  BSF    03.5
003A:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003B:  BCF    03.5
003C:  BTFSC  2F.2
003D:  GOTO   040
003E:  BCF    06.5
003F:  GOTO   041
0040:  BSF    06.5
0041:  BSF    03.5
0042:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0043:  BCF    03.5
0044:  BTFSC  2F.3
0045:  GOTO   048
0046:  BCF    06.6
0047:  GOTO   049
0048:  BSF    06.6
0049:  BSF    03.5
004A:  BCF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BCF    03.5
004D:  BSF    06.2
004E:  BSF    03.5
004F:  BCF    06.2
....................    delay_us(2); 
0050:  MOVLW  02
0051:  MOVWF  77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  GOTO   055
0055:  NOP
....................    lcd_output_enable(0); 
0056:  BCF    03.5
0057:  BCF    06.2
0058:  BSF    03.5
0059:  BCF    06.2
005A:  BCF    03.5
005B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008D:  BSF    03.5
008E:  BCF    06.2
....................    lcd_rs_tris(); 
008F:  BCF    06.0
....................    lcd_rw_tris(); 
0090:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0091:  BCF    03.5
0092:  BCF    06.0
0093:  BSF    03.5
0094:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C5:  MOVF   78,W
00C6:  MOVWF  2E
00C7:  BTFSS  2E.7
00C8:  GOTO   0CB
00C9:  BSF    03.5
00CA:  GOTO   095
....................    lcd_output_rs(address); 
00CB:  MOVF   2C,F
00CC:  BTFSS  03.2
00CD:  GOTO   0D0
00CE:  BCF    06.0
00CF:  GOTO   0D1
00D0:  BSF    06.0
00D1:  BSF    03.5
00D2:  BCF    06.0
....................    delay_cycles(1); 
00D3:  NOP
....................    lcd_output_rw(0); 
00D4:  BCF    03.5
00D5:  BCF    06.1
00D6:  BSF    03.5
00D7:  BCF    06.1
....................    delay_cycles(1); 
00D8:  NOP
....................    lcd_output_enable(0); 
00D9:  BCF    03.5
00DA:  BCF    06.2
00DB:  BSF    03.5
00DC:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00DD:  BCF    03.5
00DE:  SWAPF  2D,W
00DF:  MOVWF  2E
00E0:  MOVLW  0F
00E1:  ANDWF  2E,F
00E2:  MOVF   2E,W
00E3:  MOVWF  2F
00E4:  CALL   02C
....................    lcd_send_nibble(n & 0xf); 
00E5:  MOVF   2D,W
00E6:  ANDLW  0F
00E7:  MOVWF  2E
00E8:  MOVWF  2F
00E9:  CALL   02C
00EA:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00EB:  BSF    03.5
00EC:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00ED:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00EE:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00EF:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F0:  BCF    06.2
....................    lcd_rs_tris(); 
00F1:  BCF    06.0
....................    lcd_rw_tris(); 
00F2:  BCF    06.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00F3:  BCF    03.5
00F4:  BCF    06.0
00F5:  BSF    03.5
00F6:  BCF    06.0
....................    lcd_output_rw(0); 
00F7:  BCF    03.5
00F8:  BCF    06.1
00F9:  BSF    03.5
00FA:  BCF    06.1
....................    lcd_output_enable(0); 
00FB:  BCF    03.5
00FC:  BCF    06.2
00FD:  BSF    03.5
00FE:  BCF    06.2
....................      
....................    delay_ms(15); 
00FF:  MOVLW  0F
0100:  BCF    03.5
0101:  MOVWF  28
0102:  CALL   018
....................    for(i=1;i<=3;++i) 
0103:  MOVLW  01
0104:  MOVWF  23
0105:  MOVF   23,W
0106:  SUBLW  03
0107:  BTFSS  03.0
0108:  GOTO   111
....................    { 
....................        lcd_send_nibble(3); 
0109:  MOVLW  03
010A:  MOVWF  2F
010B:  CALL   02C
....................        delay_ms(5); 
010C:  MOVLW  05
010D:  MOVWF  28
010E:  CALL   018
010F:  INCF   23,F
0110:  GOTO   105
....................    } 
....................     
....................    lcd_send_nibble(2); 
0111:  MOVLW  02
0112:  MOVWF  2F
0113:  CALL   02C
....................    delay_ms(5); 
0114:  MOVLW  05
0115:  MOVWF  28
0116:  CALL   018
....................    for(i=0;i<=3;++i) 
0117:  CLRF   23
0118:  MOVF   23,W
0119:  SUBLW  03
011A:  BTFSS  03.0
011B:  GOTO   125
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011C:  MOVF   23,W
011D:  CALL   004
011E:  MOVWF  24
011F:  CLRF   2C
0120:  MOVF   24,W
0121:  MOVWF  2D
0122:  CALL   08D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0123:  INCF   23,F
0124:  GOTO   118
0125:  BCF    0A.3
0126:  BCF    0A.4
0127:  GOTO   331 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0128:  DECFSZ 29,W
0129:  GOTO   12B
012A:  GOTO   12E
....................       address=LCD_LINE_TWO; 
012B:  MOVLW  40
012C:  MOVWF  2A
012D:  GOTO   12F
....................    else 
....................       address=0; 
012E:  CLRF   2A
....................       
....................    address+=x-1; 
012F:  MOVLW  01
0130:  SUBWF  28,W
0131:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
0132:  MOVF   2A,W
0133:  IORLW  80
0134:  MOVWF  2B
0135:  CLRF   2C
0136:  MOVF   2B,W
0137:  MOVWF  2D
0138:  CALL   08D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0139:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
013A:  MOVF   27,W
013B:  XORLW  07
013C:  BTFSC  03.2
013D:  GOTO   148
013E:  XORLW  0B
013F:  BTFSC  03.2
0140:  GOTO   14D
0141:  XORLW  06
0142:  BTFSC  03.2
0143:  GOTO   155
0144:  XORLW  02
0145:  BTFSC  03.2
0146:  GOTO   15B
0147:  GOTO   160
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0148:  MOVLW  01
0149:  MOVWF  28
014A:  MOVWF  29
014B:  CALL   128
014C:  GOTO   165
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
014D:  CLRF   2C
014E:  MOVLW  01
014F:  MOVWF  2D
0150:  CALL   08D
....................                      delay_ms(2); 
0151:  MOVLW  02
0152:  MOVWF  28
0153:  CALL   018
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0154:  GOTO   165
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0155:  MOVLW  01
0156:  MOVWF  28
0157:  MOVLW  02
0158:  MOVWF  29
0159:  CALL   128
015A:  GOTO   165
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
015B:  CLRF   2C
015C:  MOVLW  10
015D:  MOVWF  2D
015E:  CALL   08D
015F:  GOTO   165
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0160:  MOVLW  01
0161:  MOVWF  2C
0162:  MOVF   27,W
0163:  MOVWF  2D
0164:  CALL   08D
....................      #endif 
....................    } 
0165:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... int tus; 
....................  
....................  
....................  int SayiYazdir(){ 
....................      tus=-1; 
*
018D:  MOVLW  FF
018E:  MOVWF  20
....................      delay_ms(50); 
018F:  MOVLW  32
0190:  MOVWF  28
0191:  CALL   018
....................       
....................      output_high(pin_d0); 
0192:  BSF    03.5
0193:  BCF    08.0
0194:  BCF    03.5
0195:  BSF    08.0
....................      if(input(pin_c0)){ 
0196:  BSF    21.0
0197:  MOVF   21,W
0198:  BSF    03.5
0199:  MOVWF  07
019A:  BCF    03.5
019B:  BTFSS  07.0
019C:  GOTO   1A2
....................      delay_ms(50); 
019D:  MOVLW  32
019E:  MOVWF  28
019F:  CALL   018
....................      tus=3; 
01A0:  MOVLW  03
01A1:  MOVWF  20
....................      } 
....................      if(input(pin_c1)){ 
01A2:  BSF    21.1
01A3:  MOVF   21,W
01A4:  BSF    03.5
01A5:  MOVWF  07
01A6:  BCF    03.5
01A7:  BTFSS  07.1
01A8:  GOTO   1AE
....................      delay_ms(50); 
01A9:  MOVLW  32
01AA:  MOVWF  28
01AB:  CALL   018
....................      tus=6; 
01AC:  MOVLW  06
01AD:  MOVWF  20
....................      } 
....................      if(input(pin_c2)){ 
01AE:  BSF    21.2
01AF:  MOVF   21,W
01B0:  BSF    03.5
01B1:  MOVWF  07
01B2:  BCF    03.5
01B3:  BTFSS  07.2
01B4:  GOTO   1BA
....................      delay_ms(50); 
01B5:  MOVLW  32
01B6:  MOVWF  28
01B7:  CALL   018
....................      tus=9; 
01B8:  MOVLW  09
01B9:  MOVWF  20
....................      } 
....................      if(input(pin_c3)){ 
01BA:  BSF    21.3
01BB:  MOVF   21,W
01BC:  BSF    03.5
01BD:  MOVWF  07
01BE:  BCF    03.5
01BF:  BTFSS  07.3
01C0:  GOTO   1C6
....................      delay_ms(50); 
01C1:  MOVLW  32
01C2:  MOVWF  28
01C3:  CALL   018
....................      tus=10; 
01C4:  MOVLW  0A
01C5:  MOVWF  20
....................      } 
....................      output_low(pin_d0); 
01C6:  BSF    03.5
01C7:  BCF    08.0
01C8:  BCF    03.5
01C9:  BCF    08.0
....................        
....................      delay_ms(50); 
01CA:  MOVLW  32
01CB:  MOVWF  28
01CC:  CALL   018
....................      output_high(pin_d1); 
01CD:  BSF    03.5
01CE:  BCF    08.1
01CF:  BCF    03.5
01D0:  BSF    08.1
....................      if(input(pin_c0)){ 
01D1:  BSF    21.0
01D2:  MOVF   21,W
01D3:  BSF    03.5
01D4:  MOVWF  07
01D5:  BCF    03.5
01D6:  BTFSS  07.0
01D7:  GOTO   1DD
....................      delay_ms(50); 
01D8:  MOVLW  32
01D9:  MOVWF  28
01DA:  CALL   018
....................      tus=8; 
01DB:  MOVLW  08
01DC:  MOVWF  20
....................      } 
....................      if(input(pin_c1)){ 
01DD:  BSF    21.1
01DE:  MOVF   21,W
01DF:  BSF    03.5
01E0:  MOVWF  07
01E1:  BCF    03.5
01E2:  BTFSS  07.1
01E3:  GOTO   1E9
....................      delay_ms(50); 
01E4:  MOVLW  32
01E5:  MOVWF  28
01E6:  CALL   018
....................      tus=5; 
01E7:  MOVLW  05
01E8:  MOVWF  20
....................      } 
....................      if(input(pin_c2)){ 
01E9:  BSF    21.2
01EA:  MOVF   21,W
01EB:  BSF    03.5
01EC:  MOVWF  07
01ED:  BCF    03.5
01EE:  BTFSS  07.2
01EF:  GOTO   1F5
....................      delay_ms(50); 
01F0:  MOVLW  32
01F1:  MOVWF  28
01F2:  CALL   018
....................      tus=2; 
01F3:  MOVLW  02
01F4:  MOVWF  20
....................      } 
....................      if(input(pin_c3)){ 
01F5:  BSF    21.3
01F6:  MOVF   21,W
01F7:  BSF    03.5
01F8:  MOVWF  07
01F9:  BCF    03.5
01FA:  BTFSS  07.3
01FB:  GOTO   200
....................      delay_ms(50); 
01FC:  MOVLW  32
01FD:  MOVWF  28
01FE:  CALL   018
....................      tus=0; 
01FF:  CLRF   20
....................      } 
....................       
....................       output_low(pin_d1); 
0200:  BSF    03.5
0201:  BCF    08.1
0202:  BCF    03.5
0203:  BCF    08.1
....................       delay_ms(50); 
0204:  MOVLW  32
0205:  MOVWF  28
0206:  CALL   018
....................  
....................      output_high(pin_d2); 
0207:  BSF    03.5
0208:  BCF    08.2
0209:  BCF    03.5
020A:  BSF    08.2
....................       
....................      if(input(pin_c0)){ 
020B:  BSF    21.0
020C:  MOVF   21,W
020D:  BSF    03.5
020E:  MOVWF  07
020F:  BCF    03.5
0210:  BTFSS  07.0
0211:  GOTO   217
....................      delay_ms(50); 
0212:  MOVLW  32
0213:  MOVWF  28
0214:  CALL   018
....................      tus=1; 
0215:  MOVLW  01
0216:  MOVWF  20
....................      } 
....................      if(input(pin_c1)){ 
0217:  BSF    21.1
0218:  MOVF   21,W
0219:  BSF    03.5
021A:  MOVWF  07
021B:  BCF    03.5
021C:  BTFSS  07.1
021D:  GOTO   223
....................      delay_ms(20); 
021E:  MOVLW  14
021F:  MOVWF  28
0220:  CALL   018
....................      tus=4; 
0221:  MOVLW  04
0222:  MOVWF  20
....................      } 
....................      if(input(pin_c2)){ 
0223:  BSF    21.2
0224:  MOVF   21,W
0225:  BSF    03.5
0226:  MOVWF  07
0227:  BCF    03.5
0228:  BTFSS  07.2
0229:  GOTO   22F
....................      delay_ms(50); 
022A:  MOVLW  32
022B:  MOVWF  28
022C:  CALL   018
....................      tus=7; 
022D:  MOVLW  07
022E:  MOVWF  20
....................      } 
....................      if(input(pin_c3)){ 
022F:  BSF    21.3
0230:  MOVF   21,W
0231:  BSF    03.5
0232:  MOVWF  07
0233:  BCF    03.5
0234:  BTFSS  07.3
0235:  GOTO   23B
....................      delay_ms(50); 
0236:  MOVLW  32
0237:  MOVWF  28
0238:  CALL   018
....................      tus=11; 
0239:  MOVLW  0B
023A:  MOVWF  20
....................      } 
....................      output_low(pin_d2); 
023B:  BSF    03.5
023C:  BCF    08.2
023D:  BCF    03.5
023E:  BCF    08.2
....................      delay_ms(50); 
023F:  MOVLW  32
0240:  MOVWF  28
0241:  CALL   018
....................       
....................  
....................      output_high(pin_d3); 
0242:  BSF    03.5
0243:  BCF    08.3
0244:  BCF    03.5
0245:  BSF    08.3
....................       
....................      if(input(pin_c0)){ 
0246:  BSF    21.0
0247:  MOVF   21,W
0248:  BSF    03.5
0249:  MOVWF  07
024A:  BCF    03.5
024B:  BTFSS  07.0
024C:  GOTO   252
....................      delay_ms(50); 
024D:  MOVLW  32
024E:  MOVWF  28
024F:  CALL   018
....................      tus=12; 
0250:  MOVLW  0C
0251:  MOVWF  20
....................      } 
....................      if(input(pin_c1)){ 
0252:  BSF    21.1
0253:  MOVF   21,W
0254:  BSF    03.5
0255:  MOVWF  07
0256:  BCF    03.5
0257:  BTFSS  07.1
0258:  GOTO   25E
....................      delay_ms(20); 
0259:  MOVLW  14
025A:  MOVWF  28
025B:  CALL   018
....................      tus=13; 
025C:  MOVLW  0D
025D:  MOVWF  20
....................      } 
....................      if(input(pin_c2)){ 
025E:  BSF    21.2
025F:  MOVF   21,W
0260:  BSF    03.5
0261:  MOVWF  07
0262:  BCF    03.5
0263:  BTFSS  07.2
0264:  GOTO   26A
....................      delay_ms(50); 
0265:  MOVLW  32
0266:  MOVWF  28
0267:  CALL   018
....................      tus=14; 
0268:  MOVLW  0E
0269:  MOVWF  20
....................      } 
....................      if(input(pin_c3)){ 
026A:  BSF    21.3
026B:  MOVF   21,W
026C:  BSF    03.5
026D:  MOVWF  07
026E:  BCF    03.5
026F:  BTFSS  07.3
0270:  GOTO   276
....................      delay_ms(50); 
0271:  MOVLW  32
0272:  MOVWF  28
0273:  CALL   018
....................      tus=15; 
0274:  MOVLW  0F
0275:  MOVWF  20
....................      } 
....................      output_low(pin_d3); 
0276:  BSF    03.5
0277:  BCF    08.3
0278:  BCF    03.5
0279:  BCF    08.3
....................      delay_ms(50); 
027A:  MOVLW  32
027B:  MOVWF  28
027C:  CALL   018
....................    return tus;   
027D:  MOVF   20,W
027E:  MOVWF  78
027F:  BCF    0A.3
0280:  BCF    0A.4
0281:  GOTO   339 (RETURN)
....................      } 
....................  
.................... void main() 
*
031B:  MOVLW  FF
031C:  MOVWF  21
031D:  BSF    03.5
031E:  BSF    1F.0
031F:  BSF    1F.1
0320:  BSF    1F.2
0321:  BCF    1F.3
0322:  MOVLW  07
0323:  MOVWF  1C
0324:  BCF    03.7
0325:  MOVLW  1F
0326:  ANDWF  03,F
.................... { 
....................    set_tris_b(0x00); 
0327:  MOVLW  00
0328:  MOVWF  06
....................    set_tris_c(0x00); 
0329:  MOVWF  07
032A:  BCF    03.5
032B:  MOVWF  21
....................    set_tris_d(0xf0); 
032C:  MOVLW  F0
032D:  BSF    03.5
032E:  MOVWF  08
....................  
....................    lcd_init(); 
032F:  BCF    03.5
0330:  GOTO   0EB
....................  
....................    lcd_putc("\fiþlem yap"); 
0331:  MOVLW  0C
0332:  BSF    03.6
0333:  MOVWF  0D
0334:  MOVLW  00
0335:  MOVWF  0F
0336:  BCF    03.6
0337:  GOTO   166
....................  
....................   while(TRUE) 
....................    { 
....................    int donentus=sayiYazdir(); 
0338:  GOTO   18D
0339:  MOVF   78,W
033A:  MOVWF  22
....................    lcd_putc("\n"); 
033B:  MOVLW  17
033C:  BSF    03.6
033D:  MOVWF  0D
033E:  MOVLW  00
033F:  MOVWF  0F
0340:  BCF    03.6
0341:  GOTO   282
....................    if(donentus!=-1){ 
0342:  MOVF   22,W
0343:  SUBLW  FF
0344:  BTFSC  03.2
0345:  GOTO   34B
....................     
....................    printf(lcd_putc,"%u" , donentus); 
0346:  MOVF   22,W
0347:  MOVWF  23
0348:  MOVLW  1B
0349:  MOVWF  24
034A:  GOTO   2E4
....................    } 
034B:  GOTO   338
....................     
....................    } 
....................  
....................  
.................... } 
034C:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
